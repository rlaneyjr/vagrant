# -*- mode: ruby -*-

# vi: set ft=ruby :

rtr_xr_cfg_file_remote = "/home/vagrant/rtr_config"
rtr_xr_cfg_dir_host = "configs"
rtr_xr_scripts_dir_host = "xr_scripts"
boxes = [
    {
        :name => "rtr1",
        :eth1mac => "080027500011",
        :eth2mac => "080027500012",
        :lnxsshport => "2201",
        :xrsshport => "2301",
        :xrcnslport => "65001",
        :xrauxport => "65002",
        :eth3mac => "080027500013"
    },
    {
        :name => "rtr2",
        :eth1mac => "080027500021",
        :eth2mac => "080027500022",
        :lnxsshport => "2202",
        :xrsshport => "2302",
        :xrcnslport => "65003",
        :xrauxport => "65004",
        :eth3mac => "080027500023"
    }
]

Vagrant.configure(2) do |config|

  config.vm.box = "xrv64"

  # Turn off shared folders
  config.vm.synced_folder ".", "/vagrant", id: "vagrant-root", disabled: true

  # Give IOS XRv (64-bit) 400 seconds to come up
  config.vm.boot_timeout = 400

  # 57722 is the operns_sshd (22 is XR)
  config.ssh.forward_agent = true
  config.ssh.insert_key = true
  config.ssh.guest_port = 57722

  boxes.each do |opts|
    # common section for the nodes
    config.vm.define opts[:name] do |config|
      config.vm.network :forwarded_port, guest: 22, host: opts[:xrsshport], id: "ssh", auto_correct: true

      config.vm.post_up_message="Welcome to the IOS-XR XRv64 Virtualbox. \n"\
                            "Please use 'vagrant ssh #{opts[:name]}' to access "\
                            "the router's linux shell. \n"\
                            "'ssh vagrant@localhost -p #{opts[:xrsshport]}' to ssh to XR console.\n"\
                            "'telnet localhost #{opts[:xrcnslport]}' to connect directly to XR Console.\n"\
                            "'telnet localhost #{opts[:xrauxport]}' to connect directly to XR Aux.\n"

      config.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--uart1", "0x3F8", 4, "--uartmode1", 'tcpserver', opts[:xrcnslport]]
        v.customize ["modifyvm", :id, "--uart2", "0x2F8", 3, "--uartmode2", 'tcpserver', opts[:xrauxport]]
        v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
        v.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
      end

      config.vm.network :private_network, virtualbox__intnet: "link1", :mac => opts[:eth1mac], auto_config: false
      config.vm.network :private_network, virtualbox__intnet: "link2", :mac => opts[:eth2mac], auto_config: false
      config.vm.network :private_network, virtualbox__intnet: "link3", :mac => opts[:eth3mac], auto_config: false

      #Source a config file and apply it to XR
      config.vm.provision "file", source: "#{rtr_xr_cfg_dir_host}/#{opts[:name]}_config", destination: rtr_xr_cfg_file_remote
      config.vm.provision "shell" do |s|
        s.path =  "#{rtr_xr_scripts_dir_host}/apply_config.sh"
        s.args = ["#{rtr_xr_cfg_file_remote}"]
      end

#      if opts[:name] == 'rtr1'
#        config.vm.provision "file", source: "~/configs/#{opts[:name]}_config", destination: "~/rtr_config"
#        config.vm.provision "shell", inline: "$script"

#        config.vm.provision "ansible" do |ansible|
#          ansible.playbook = "rtr1_playbook.yml"
#          ansible.sudo = true
#      end

#      if opts[:name] == 'rtr2'
#        config.vm.provision "file", source: "~/configs/rtr2_config", destination: "~/rtr2_config"

#        config.vm.provision "ansible" do |ansible|
#          ansible.playbook = "rtr2_playbook.yml"
#          ansible.sudo = true
#      end
    end
  end
end
